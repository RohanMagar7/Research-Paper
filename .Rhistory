loan <- read.csv('F:/R programming/learning/assignments/learning dataset/german.csv')
head(loan)
View(loan)
loan <- read.csv('F:/R programming/learning/assignments/learning dataset/loan.csv')
View(loan)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
library(dplyr)
library(dplyr)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
View(loan_subset)
head(loan_subset)
View(loan_subset)
loan_sub <- aapply(loan_subset, 2, normalize)
loan_sub <- apply(loan_subset, 2, normalize)
normalize <- function(x){
return((x-min(x))/(max(x)) - (min(x)) )
}
loan_sub <- apply(loan_subset, 2, normalize)
View(loan_subset)
loan_sub <- apply(loan_subset$bank_asset_value, 2, normalize)
loan_sub <- apply(loan_subset$bank_asset_value, 2, normalize)
apply(loan_subset$bank_asset_value,2,normalize)
apply(loan_subset[,1],2,normalize)
apply(loan_subset[,1:1],2,normalize)
loan_subset <- as.data.frame(loan_subset)
loan_sub <- apply(loan_subset$bank_asset_value , 2, normalize)
loan_sub <- apply(loan_subset[, "bank_asset_value", drop = FALSE], 2, normalize)
View(loan_sub)
loan_subset$bank_asset_value <- loan_sub
View(loan_subset)
loan_subset$education <- as.numeric(loan_subset$education)
loan_subset$education <- as.numeric(loan_subset$education)
View(loan_subset)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
loan_subset <- as.data.frame(loan_subset)
normalize <- function(x){
return((x-min(x))/(max(x)) - (min(x)) )
}
loan_sub <- apply(loan_subset$bank_asset_value , 2, normalize)
loan_sub <- apply(loan_subset[, "bank_asset_value", drop = FALSE], 2, normalize)
loan_subset$bank_asset_value <- loan_sub
edu <- as.numeric(as.factor(loan_subset$education))
View(edu)
edu
loan_subset$education <- edu
View(loan_subset)
self_employed <- as.numeric(as.factor(loan_subset$self_employed))
self_employed
loan_subset <- loan_subset %>%
mutate(loan_status(where(is.character) , ~ ifelse(,=='Approved', 1 , 0)))
loan_subset <- loan_subset %>%
mutate(loan_status(where(is.character) , ~ ifelse(.=='Approved', 1 , 0)))
View(loan_subset)
loan_subset <- loan_subset %>%
mutate(across(where(is.character) , ~ ifelse(.=='Approved', 1 , 0)))
View(loan_subset)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
loan_subset <- as.data.frame(loan_subset)
normalize <- function(x){
return((x-min(x))/(max(x)) - (min(x)) )
}
loan_sub <- apply(loan_subset[, "bank_asset_value", drop = FALSE], 2, normalize)
loan_subset$bank_asset_value <- loan_sub
loan_subset$loan_status <- as.numeric(factor(loan_subset$loan_status)) - 1
View(loan_subset)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
loan_subset <- as.data.frame(loan_subset)
View(loan_subset)
loan_subset <- loan_subset %>%
mutate(loan_status = (loan_status == "approved") * 1)
View(loan_subset)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
loan_subset <- as.data.frame(loan_subset)
loan_subset <- loan_subset %>%
mutate(loan_status = case_when(
loan_status == "approved"  ~ 1,
loan_status == "pending"   ~ 2,
loan_status == "rejected"  ~ 0,
TRUE ~ NA_real_  # For any unexpected values
))
View(loan_subset)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
View(loan_subset)
loan_subset <- loan_subset %>%
mutate(loan_status = case_when(
loan_status == "Approved"  ~ 1,
loan_status == "Rejected"  ~ 0,
loan_status == "pending"   ~ 2,
TRUE ~ NA_real_  # For any unexpected values
))
View(loan_subset)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
loan_sub <- apply(loan_subset[, "bank_asset_value", drop = FALSE], 2, normalize)
loan_subset$bank_asset_value <- loan_sub
View(loan_subset)
edu <- as.numeric(as.factor(loan_subset$education))-1
edu
View(loan_subset)
View(loan_subset)
loan_subset$loan_status <- ifelse(loan_subset$loan_status == "Approved", 1, 0)
View(loan_subset)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, normalize)
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, category)
category <- function(category){
value = if(category == 'Approved'){
return(1)
}else{
return(0)
}
return(value)
}
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, category)
category <- function(category){
value = if(category == 'Approved'){
return(1)
}else{
return(0)
}
return(value)
}
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, category)
category <- function(category){
value = if(category == "Approved"){
return(1)
}else{
return(0)
}
return(value)
}
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, category)
category <- function(category) {
ifelse(category == "Approved", 1, 0)
}
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, category)
View(cat)
category <- function(category) {
ifelse(category == "Rejected", 0, 1)
}
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, category)
View(cat)
category <- function(category) {
ifelse(trimws(tolower(category)) == "approved", 1, 0)
}
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, category)
View(cat)
loan_subset$loan_status <- cat
View(loan_subset)
grad <- function(grad){
ifelse(trimws(tolower(grad)) == 'Not Graduate', 0 , 1)
}
graduation <- apply(loan_subset[,"education" , drop=FALSE] , 2, grad)
View(grad())
View(grad)
View(graduation)
grad <- function(grad){
ifelse(trimws(tolower(grad)) == 'graduate', 1 , 0)
}
graduation <- apply(loan_subset[,"education" , drop=FALSE] , 2, grad)
View(graduation)
loan_subset$education <- graduation
View(loan_subset)
normalize <- function(x){
return((x-min(x))/(max(x)) - (min(x)) )
}
loan_subset$bank_asset_value <- apply(loan_subset[, "bank_asset_value", drop = FALSE], 2, normalize)
View(loan_subset)
View(loan_subset)
colnames(loan_subset) <- c("bank_asset_value", "no_of_dependents", "education" , "self_employed"
,"income_annum" , "loan_amount" , "loan_term" , "cibil_score", "residential_assets_value",
"commercial_assets_value" ,"luxury_assets_value" , "bank_asset_value" , "loan_status")
colnames(loan_subset) <- c("bank_asset_value", "no_of_dependents", "education" , "self_employed"
,"income_annum" , "loan_amount" , "loan_term" , "cibil_score", "residential_assets_value",
"commercial_assets_value" ,"luxury_assets_value" , "bank_asset_value" , "loan_status")
loan_subset <- as.matrix(loan_subset)
colnames(loan_subset) <- c("bank_asset_value", "no_of_dependents", "education" , "self_employed"
,"income_annum" , "loan_amount" , "loan_term" , "cibil_score", "residential_assets_value",
"commercial_assets_value" ,"luxury_assets_value" , "bank_asset_value" , "loan_status")
View(loan_subset)
View(loan_subset)
loan_subset <- as.data.frame(loan_subset)
selfemp <- function(category){
ifelse(trimws(tolower(category)) == 'yes' , 1 , 0 )
}
loan_subset$self_employed <- apply(loan_subset[,'self_employed',drop = FALSE] , 2, selfemp)
View(loan_subset)
loan_subset$bank_asset_value <- apply(loan_subset[, "bank_asset_value", drop = FALSE], 2, normalize)
loan_subset$residential_assets_value <- apply(loan_subset[,'residential_assets_value', drop=FALSE], 2 , normalize)
normalize <- function(x){
return((x-min(x))/(max(x)) - (min(x)) )
}
loan_subset$bank_asset_value <- apply(loan_subset[, "bank_asset_value", drop = FALSE], 2, normalize)
loan_subset$residential_assets_value <- apply(loan_subset[,'residential_assets_value', drop=FALSE], 2 , normalize)
loan_subset$income_annum <- apply(loan_subset[,'income_annum',drop=FALSE], 2, normalize)
loan_subset$loan_amount <- apply(loan_subset[,'loan_amount',drop = FALSE] , 2 , normalize)
loan_subset$commercial_assets_value <- apply(loan_subset[,'commercial_assets_value', drop = FALSE], 2, normalize)
loan_subset$cibil_score <- apply(loan_subset[,'cibil_score' , drop = FALSE] , 2, normalize)
loan_subset$loan_term <- apply(loan_subset[,'loan_term',drop = FALSE] , 2, normalize)
loan_subset$luxury_assets_value <- apply(loan_subset[,'luxury_assets_value', drop = FALSE] ,2 ,normalize)
View(loan_subset)
loan_subset <- loan %>%
select(bank_asset_value, no_of_dependents, education , self_employed
,income_annum , loan_amount , loan_term , cibil_score, residential_assets_value,
commercial_assets_value ,luxury_assets_value , bank_asset_value , loan_status
)
loan_subset <- as.data.frame(loan_subset)
normalize <- function(x){
return((x-min(x))/(max(x)) - (min(x)) )
}
loan_subset$bank_asset_value <- apply(loan_subset[, "bank_asset_value", drop = FALSE], 2, normalize)
loan_subset$residential_assets_value <- apply(loan_subset[,'residential_assets_value', drop=FALSE], 2 , normalize)
loan_subset$income_annum <- apply(loan_subset[,'income_annum',drop=FALSE], 2, normalize)
loan_subset$loan_amount <- apply(loan_subset[,'loan_amount',drop = FALSE] , 2 , normalize)
loan_subset$commercial_assets_value <- apply(loan_subset[,'commercial_assets_value', drop = FALSE], 2, normalize)
loan_subset$cibil_score <- apply(loan_subset[,'cibil_score' , drop = FALSE] , 2, normalize)
loan_subset$loan_term <- apply(loan_subset[,'loan_term',drop = FALSE] , 2, normalize)
loan_subset$luxury_assets_value <- apply(loan_subset[,'luxury_assets_value', drop = FALSE] ,2 ,normalize)
self_employed <- as.numeric(as.factor(loan_subset$self_employed))
loan_subset$education <- edu
category <- function(category) {
ifelse(trimws(tolower(category)) == "approved", 1, 0)
}
grad <- function(grad){
ifelse(trimws(tolower(grad)) == 'graduate', 1 , 0)
}
cat <- apply(loan_subset[, "loan_status", drop = FALSE], 2, category)
selfemp <- function(category){
ifelse(trimws(tolower(category)) == 'yes' , 1 , 0 )
}
loan_subset$self_employed <- apply(loan_subset[,'self_employed',drop = FALSE] , 2, selfemp)
graduation <- apply(loan_subset[,"education" , drop=FALSE] , 2, grad)
loan_subset$loan_status <- cat
loan_subset$education <- graduation
View(loan_subset)
path <- 'F:/R programming/learning/assignments/learning dataset/snads.csv'
dataset <- read.csv(path)
head(dataset)
sub <- dataset[3:5]
sub
sub$Purchased <- as.factor(sub$Purchased , levels=  c(0,1))
sub$Purchased <- factor(sub$Purchased , levels= c(0,1))
head(dataset)
head(sub)
View(sub)
set.seed(123)
install.packages("caTools")
library(caTools)
split_d <- sample.split(sub$Purchased, SplitRatio = 0.75 )
View(split_d))
View(split_d))
View(split_d)
split_d
sub.train <- subset(sub,split_d == TRUE)
sub.test <- subset(sub,split_d == FALSE)
nrow(sub.train)
nrow(sub.test)
nrow(sub)
traning_set[-3] <- scale(sub.train[-3])
traning_set <- scale(sub.train[-3])
traning_set
View(training_set)
View(traning_set)
View(sub)
View(traning_set)
sub.train[-3] <- scale(sub.train[-3])
View(sub.train)
sub.test[-3] <- scale(sub.test[-3])
pre <- knn(train = sub.train[-3],test = sub.test[-3], cl = sub.train[,3], k = 5 )
library(class)
pre <- knn(train = sub.train[-3],test = sub.test[-3], cl = sub.train[,3], k = 5 )
pre
View(pre)
### create confusion matrix
confmatrix <- table(sub.test[,3],pre)
confmatrix
View(iris)
#scale the dataset
iris[,1:4] <- scale(iris[,1:4])
View(iris)
View(iris)
library(caTools)
split_data <- sample.split(iris$Species , SplitRatio = 0.75)
iris.train <- subset(iris,split_data == TRUE)
iris.test <- subset(iris,split_data == FALSE)
nrow(iris.train)
nrow(iris.test)
nrow(iris)
View(iris.train)
View(iris.test)
# Extract Predicator variable ( x ) and target variable ( y )
trainX <- iris.train[,1:4]
testX <- iris.test[,1:4]
trainY <- iris.train$Species
testY <- iris.test$Species
# perform knn
knn.predict <- knn(train = trainX, test = testX , cl = trainY , k = 5)
knn.predict
testY
# evaluate model
conf_matrix <- table(prediccted = knn.predict , Actual = testY)
conf_matrix
### calculate accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
print(paste('accuracy',round(accuracy)))
print(paste('accuracy',round(accuracy * 100 )))
print(paste('accuracy',round(accuracy * 100  , 2)))
### fint optimal K using Error Rate
# finding the best k values
error_rate <- numeric(15)
error_rate
print(paste('accuracy',round(accuracy * 100  , 2)))
### fint optimal K using Error Rate
# finding the best k values
error_rate <- numeric(15)
error_rate
for ( k in 1:15){
knn.predict <- knn(train = trainX, test = testX , cl = trainY , k = k )
error_rate[k] <- mean(knn.predict != testY)
}
error_rate
error_df <- data.frame(k = 15 , error_rate)
error_df
View(error_df)
# plot K vs Error Rate
ggplot(error_df , aes(x = k , y = error_rate)) +
geom_line(color = 'green')
library(ggplot2)
# plot K vs Error Rate
ggplot(error_df , aes(x = k , y = error_rate)) +
geom_line(color = 'green')
error_df <- data.frame(k = 1:15 , error_rate)
error_df
View(error_df)
# plot K vs Error Rate
ggplot(error_df , aes(x = k , y = error_rate)) +
geom_line(color = 'green')
# plot K vs Error Rate
ggplot(error_df , aes(x = k , y = error_rate)) +
geom_line(color = 'green') +
geom_point(color = 'blue')
# plot K vs Error Rate
ggplot(error_df , aes(x = k , y = error_rate)) +
geom_line(color = 'green') +
geom_point(color = 'blue')+
ggtitle('Error Rate Vs K in KNN') +
xlab('K ( Number of Neighbors ) ') +
ylab(' Error Rate ')
# plot K vs Error Rate
ggplot(error_df , aes(x = k , y = error_rate)) +
geom_line(color = 'green') +
geom_point(color = 'blue')+
ggtitle('Error Rate Vs K in KNN') +
xlab('K ( Number of Neighbors ) ') +
ylab(' Error Rate ') +
theme_minimal()
library(caTools)
library(rpart)
dt <- read.csv(path)
head(dt)
dt <- dt[3:5]
dt$Purchased <- factor(dt$Purchased , levels = c(0,1))
split <- sample.split(dt$Purchased , SplitRatio =  0.75)
dt.train <- subset(dt , split == TRUE)
dt.test <- subset(dt,split == FALSE)
nrow(dt)
nrow(dt.train)
nrow(dt.test)
View(dt.train)
dt[,1:2] <- scale(dt[,1:2])
View(dt.train)
dt[,1:2] <- scale(dt[,1:2])
dt$Purchased <- factor(dt$Purchased , levels = c(0,1))
split <- sample.split(dt$Purchased , SplitRatio =  0.75)
dt.train <- subset(dt , split == TRUE)
dt.test <- subset(dt,split == FALSE)
# sampling
tran_X <- dt.train[]
View(dt.train)
# sampling
tran_X <- dt.train[,1:2]
View(tran_X)
test_X <- dt[,3]
View(test_X)
View(train_X)
# sampling
train_X <- dt[,1:2]
test_X <- dt[,1:2]
test_X <- dt[,3]
View(train_X)
test_X <- dt[,1:2]
test_X <- dt[3]
View(train_X)
View(test_X)
dtclassifier <- rpart(formula = Purchased ~ .,data = train_X)
dtclassifier <- rpart(formula = Purchased ~ .,data = dt.train)
dtclassifier
rpart.plot(dtclassifier, type = 4, extra = 101)
# Visualize the tree
rpart.plot(dtclassifier, type = 4, extra = 101)
install.packages("rpart.plot")
library(rpart.plot)
# Visualize the tree
rpart.plot(dtclassifier, type = 4, extra = 101)
# Visualize the tree
rpart.plot(dtclassifier, type = 2, extra = 101)
# Visualize the tree
rpart.plot(dtclassifier, type = 1, extra = 101)
# Visualize the tree
rpart.plot(dtclassifier, type = 5, extra = 101)
# Visualize the tree
rpart.plot(dtclassifier, type = 4, extra = 101)
####++++++++++++++++++++++++++++++++++++++++++++
library(rpart)
set.seed(123)
